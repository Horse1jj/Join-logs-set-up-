import discord
from discord.ext import commands, tasks
from mcrcon import MCRcon
import time

# Discord bot token and channel ID
DISCORD_TOKEN = 'your_discord_bot_token'
CHANNEL_ID = 123456789012345678  # Replace with your target channel ID

# RCON connection details
RCON_HOST = 'your_pavlov_server_ip'
RCON_PORT = 12345  # Default RCON port for Pavlov
RCON_PASSWORD = 'your_rcon_password'

# Set up the Discord bot
intents = discord.Intents.default()
intents.messages = True
bot = commands.Bot(command_prefix='!', intents=intents)

# Store connected users to avoid duplicate logs
connected_users = set()

@bot.event
async def on_ready():
    print(f'Bot is ready. Logged in as {bot.user}')
    check_for_new_players.start()

# Task to check for new players on the server
@tasks.loop(seconds=10)  # Adjust the interval as needed
async def check_for_new_players():
    try:
        with MCRcon(RCON_HOST, RCON_PASSWORD, port=RCON_PORT) as mcr:
            response = mcr.command('ListPlayers')  # Command to get the list of players

            # Parse the response to extract player names
            current_players = set(parse_players(response))

            # Find newly joined players
            new_players = current_players - connected_users

            if new_players:
                # Send a message to the Discord channel for each new player
                channel = bot.get_channel(CHANNEL_ID)
                for player in new_players:
                    await channel.send(f'{player} has joined the server!')

            # Update the set of connected players
            connected_users.update(new_players)

    except Exception as e:
        print(f'Error fetching player data: {e}')

# Function to parse the player list from the RCON response
def parse_players(response):
    # Example logic, adjust based on actual response format
    # Assuming response contains player names in a list format
    lines = response.split('\n')
    players = [line.strip() for line in lines if line.strip()]
    return players

# Run the bot
bot.run(DISCORD_TOKEN)


